#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –í–ï–ë-–°–ê–ô–¢–û–í –° –ú–ù–û–ì–û–Ø–ó–´–ß–ù–û–ô –ü–û–î–î–ï–†–ñ–ö–û–ô
=============================================================
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞—â–∏—Ç—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–æ–≤
—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤

–ê–≤—Ç–æ—Ä: Senior Python Developer  
–í–µ—Ä—Å–∏—è: 3.1.0
–î–∞—Ç–∞: 2025-09-14
"""

import tkinter as tk
from tkinter import ttk, messagebox
import threading
from datetime import datetime
import sys
import os
import json

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
from protection_analyzer import ProtectionAnalyzer
from structure_analyzer import StructureAnalyzer
from gui_components import AnalyzerGUI
from utils import setup_logging, validate_url
from languages import get_text, set_language, get_current_language

class ComprehensiveWebsiteAnalyzer:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤–µ–±-—Å–∞–π—Ç–æ–≤ —Å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""

    def __init__(self):
        self.logger = setup_logging()
        self.logger.info(f"{get_text('app_title')} v3.1 - {get_text('status_ready')}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
        self.protection_analyzer = ProtectionAnalyzer()
        self.structure_analyzer = StructureAnalyzer()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.analysis_count = 0
        self.start_time = datetime.now()

    def analyze_website(self, url, analysis_type="both", language=None):
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–µ–±-—Å–∞–π—Ç–∞
        
        Args:
            url (str): URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_type (str): –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ ("protection", "structure", "both")
            language (str): –Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ ("ru", "en") - –µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        if language:
            set_language(language)
            
        self.logger.info(f"{get_text('status_analyzing')}: {url}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        if not validate_url(url):
            raise ValueError(get_text('invalid_url'))
        
        results = {
            'url': url,
            'analysis_type': analysis_type,
            'language': get_current_language(),
            'timestamp': datetime.now().isoformat(),
            'version': '3.1.0'
        }
        
        try:
            # –ê–Ω–∞–ª–∏–∑ –∑–∞—â–∏—Ç—ã
            if analysis_type in ['protection', 'both']:
                self.logger.info(f"{get_text('tab_protection')} - {get_text('status_analyzing')}")
                protection_results = self.protection_analyzer.analyze(url)
                results['protection'] = protection_results
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞—â–∏—Ç—ã
                results['protection'] = self._translate_protection_results(protection_results)
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if analysis_type in ['structure', 'both']:
                self.logger.info(f"{get_text('tab_structure')} - {get_text('status_analyzing')}")
                structure_results = self.structure_analyzer.analyze(url)
                results['structure'] = structure_results
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                results['structure'] = self._translate_structure_results(structure_results)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            results['recommendations'] = self._generate_recommendations(results)
            results['summary'] = self._generate_summary(results)
            
            self.analysis_count += 1
            self.logger.info(f"{get_text('analysis_complete')} ({self.analysis_count})")
            
            return results
            
        except Exception as e:
            error_msg = get_text('analysis_error').format(error=str(e))
            self.logger.error(error_msg)
            raise Exception(error_msg)

    def _translate_protection_results(self, results):
        """–ü–µ—Ä–µ–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞—â–∏—Ç—ã"""
        translated = results.copy()
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if 'complexity_level' in translated:
            level_map = {
                'LOW': get_text('protection_low'),
                'MEDIUM': get_text('protection_medium'), 
                'HIGH': get_text('protection_high'),
                'CRITICAL': get_text('protection_critical')
            }
            translated['complexity_level_localized'] = level_map.get(
                translated['complexity_level'], 
                translated['complexity_level']
            )
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞
        if 'bypass_methods' in translated:
            bypass_map = {
                'requests': get_text('bypass_requests'),
                'cloudscraper': get_text('bypass_cloudscraper'),
                'selenium': get_text('bypass_selenium'),
                'undetected': get_text('bypass_undetected'),
                'proxy': get_text('bypass_proxy')
            }
            
            translated['bypass_methods_localized'] = []
            for method in translated['bypass_methods']:
                localized = bypass_map.get(method, method)
                translated['bypass_methods_localized'].append(localized)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã
        protection_map = {
            'cloudflare_detected': get_text('cloudflare_detected'),
            'javascript_required': get_text('javascript_required'),
            'rate_limiting': get_text('rate_limiting'),
            'user_agent_blocking': get_text('user_agent_blocking'),
            'captcha_detected': get_text('captcha_detected'),
            'cookies_required': get_text('cookies_required')
        }
        
        translated['protection_details_localized'] = {}
        for key, value in translated.get('protection_details', {}).items():
            localized_key = protection_map.get(key, key)
            translated['protection_details_localized'][localized_key] = value
            
        return translated

    def _translate_structure_results(self, results):
        """–ü–µ—Ä–µ–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        translated = results.copy()
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if 'content_types' in translated:
            content_map = {
                'products': get_text('products_detected'),
                'articles': get_text('articles_detected'),
                'navigation': get_text('navigation_detected'),
                'forms': get_text('forms_detected'),
                'pagination': get_text('pagination_detected')
            }
            
            translated['content_types_localized'] = {}
            for content_type, detected in translated['content_types'].items():
                localized_type = content_map.get(content_type, content_type)
                translated['content_types_localized'][localized_type] = detected
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É DOM
        if 'dom_stats' in translated:
            dom_stats = translated['dom_stats']
            translated['dom_stats_localized'] = {
                get_text('total_elements'): dom_stats.get('total_elements', 0),
                get_text('unique_tags'): dom_stats.get('unique_tags', 0),
                get_text('classes_count'): dom_stats.get('classes_count', 0),
                get_text('ids_count'): dom_stats.get('ids_count', 0),
                get_text('forms_count'): dom_stats.get('forms_count', 0),
                get_text('links_count'): dom_stats.get('links_count', 0),
                get_text('images_count'): dom_stats.get('images_count', 0)
            }
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        if 'suggested_selectors' in translated:
            selector_map = {
                'products': get_text('selector_products'),
                'prices': get_text('selector_prices'),
                'titles': get_text('selector_titles'),
                'descriptions': get_text('selector_descriptions'),
                'links': get_text('selector_links'),
                'images': get_text('selector_images')
            }
            
            translated['suggested_selectors_localized'] = {}
            for selector_type, selectors in translated['suggested_selectors'].items():
                localized_type = selector_map.get(selector_type, selector_type)
                translated['suggested_selectors_localized'][localized_type] = selectors
                
        return translated

    def _generate_recommendations(self, results):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞—â–∏—Ç–µ
        if 'protection' in results:
            protection = results['protection']
            complexity_score = protection.get('complexity_score', 0)
            
            if complexity_score < 40:
                if get_current_language() == 'ru':
                    recommendations.append("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ requests + BeautifulSoup")
                    recommendations.append("üîß –î–æ–±–∞–≤—å—Ç–µ User-Agent –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
                else:
                    recommendations.append("‚úÖ Simple scraping: use requests + BeautifulSoup")
                    recommendations.append("üîß Add User-Agent headers for stability")
                    
            elif complexity_score < 60:
                if get_current_language() == 'ru':
                    recommendations.append("‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: —Ç—Ä–µ–±—É–µ—Ç—Å—è cloudscraper –∏–ª–∏ fake-useragent")
                    recommendations.append("üõ°Ô∏è –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
                else:
                    recommendations.append("‚ö†Ô∏è Medium complexity: requires cloudscraper or fake-useragent")
                    recommendations.append("üõ°Ô∏è Add delays between requests")
                    
            elif complexity_score < 80:
                if get_current_language() == 'ru':
                    recommendations.append("üö® –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ Selenium –∏–ª–∏ undetected-chrome")
                    recommendations.append("üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏ –∏ User-Agent")
                else:
                    recommendations.append("üö® High complexity: mandatory Selenium or undetected-chrome")
                    recommendations.append("üîÑ Use proxy and User-Agent rotation")
                    
            else:
                if get_current_language() == 'ru':
                    recommendations.append("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞: –Ω—É–∂–Ω—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞")
                    recommendations.append("ü§ñ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–ø—á–∞-—Å–µ—Ä–≤–∏—Å–æ–≤")
                    recommendations.append("‚è±Ô∏è –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
                else:
                    recommendations.append("üí• Critical protection: need advanced bypass methods")
                    recommendations.append("ü§ñ Consider using captcha-solving services")
                    recommendations.append("‚è±Ô∏è Significant delays and manual processing")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        if 'structure' in results:
            structure = results['structure']
            
            if structure.get('content_types', {}).get('products'):
                if get_current_language() == 'ru':
                    recommendations.append("üõí –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã")
                else:
                    recommendations.append("üõí Products detected: use provided selectors")
            
            if structure.get('content_types', {}).get('pagination'):
                if get_current_language() == 'ru':
                    recommendations.append("üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º")
                else:
                    recommendations.append("üìÑ Pagination found: automate page navigation")
        
        return recommendations

    def _generate_summary(self, results):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏"""
        summary = {
            'url': results['url'],
            'analysis_time': datetime.now().isoformat(),
            'language': get_current_language()
        }
        
        if 'protection' in results:
            protection = results['protection']
            summary['protection_level'] = protection.get('complexity_level', 'UNKNOWN')
            summary['protection_score'] = protection.get('complexity_score', 0)
            summary['protection_level_localized'] = protection.get('complexity_level_localized', 'UNKNOWN')
        
        if 'structure' in results:
            structure = results['structure']
            summary['dom_elements'] = structure.get('dom_stats', {}).get('total_elements', 0)
            summary['content_types_found'] = len([
                k for k, v in structure.get('content_types', {}).items() if v
            ])
            summary['selectors_generated'] = sum([
                len(v) for v in structure.get('suggested_selectors', {}).values()
            ])
        
        # –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        complexity_score = results.get('protection', {}).get('complexity_score', 0)
        
        if complexity_score < 40:
            difficulty = get_text('protection_low')
            time_estimate = "1-2 " + ("–¥–Ω—è" if get_current_language() == 'ru' else "days")
        elif complexity_score < 60:
            difficulty = get_text('protection_medium')
            time_estimate = "3-5 " + ("–¥–Ω–µ–π" if get_current_language() == 'ru' else "days")
        elif complexity_score < 80:
            difficulty = get_text('protection_high')
            time_estimate = "1-2 " + ("–Ω–µ–¥–µ–ª–∏" if get_current_language() == 'ru' else "weeks")
        else:
            difficulty = get_text('protection_critical')
            time_estimate = "2+ " + ("–Ω–µ–¥–µ–ª–∏" if get_current_language() == 'ru' else "weeks")
        
        summary['scraping_difficulty'] = difficulty
        summary['estimated_development_time'] = time_estimate
        
        return summary

    def export_results(self, filename, results, format='json'):
        """
        –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
        
        Args:
            filename (str): –ò–º—è —Ñ–∞–π–ª–∞
            results (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            format (str): –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ ('json', 'txt')
        """
        try:
            if format == 'json':
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(results, f, indent=2, ensure_ascii=False)
            
            elif format == 'txt':
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(f"{get_text('app_title')} v3.1\n")
                    f.write("=" * 50 + "\n\n")
                    
                    f.write(f"URL: {results['url']}\n")
                    f.write(f"{get_text('analysis_type_label')}: {results['analysis_type']}\n")
                    f.write(f"{get_text('language_label')}: {results['language']}\n")
                    f.write(f"Timestamp: {results['timestamp']}\n\n")
                    
                    if 'protection' in results:
                        f.write(f"{get_text('tab_protection')}:\n")
                        f.write("-" * 20 + "\n")
                        protection = results['protection']
                        f.write(f"{get_text('protection_level')}: {protection.get('complexity_level_localized', 'N/A')}\n")
                        f.write(f"{get_text('protection_score').format(score=protection.get('complexity_score', 0))}\n\n")
                    
                    if 'structure' in results:
                        f.write(f"{get_text('tab_structure')}:\n")
                        f.write("-" * 20 + "\n")
                        structure = results['structure']
                        dom_stats = structure.get('dom_stats_localized', {})
                        for stat_name, value in dom_stats.items():
                            f.write(f"{stat_name.format(count=value)}\n")
                        f.write("\n")
                    
                    if 'recommendations' in results:
                        f.write(f"{get_text('recommendations')}:\n")
                        f.write("-" * 20 + "\n")
                        for rec in results['recommendations']:
                            f.write(f"‚Ä¢ {rec}\n")
            
            self.logger.info(get_text('export_success').format(filename=filename))
            
        except Exception as e:
            error_msg = get_text('export_error').format(error=str(e))
            self.logger.error(error_msg)
            raise Exception(error_msg)

    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        uptime = datetime.now() - self.start_time
        
        stats = {
            'analysis_count': self.analysis_count,
            'uptime_seconds': uptime.total_seconds(),
            'current_language': get_current_language(),
            'version': '3.1.0'
        }
        
        return stats

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        root = tk.Tk()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        analyzer = ComprehensiveWebsiteAnalyzer()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ GUI
        gui = AnalyzerGUI(root, analyzer)
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        analyzer.logger.info(f"{get_text('app_title')} {get_text('status_ready')}")
        root.mainloop()
        
    except Exception as e:
        error_msg = f"Critical error: {str(e)}"
        print(error_msg)
        if 'messagebox' in globals():
            messagebox.showerror("Critical Error", error_msg)
        sys.exit(1)

if __name__ == "__main__":
    main()
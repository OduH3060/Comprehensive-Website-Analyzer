#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –£–°–¢–ê–ù–û–í–©–ò–ö –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
==========================
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞

–ê–≤—Ç–æ—Ä: Senior Python Developer
–í–µ—Ä—Å–∏—è: 3.0.0
"""

import subprocess
import sys
import os
import platform
from pathlib import Path

def print_header():
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("üöÄ –£–°–¢–ê–ù–û–í–©–ò–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –í–ï–ë-–°–ê–ô–¢–û–í")
    print("=" * 70)
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print()

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    
    version = sys.version_info
    print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 7):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ!")
        print("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ Python: https://www.python.org/downloads/")
        return False
    else:
        print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
        return True

def check_pip():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è pip"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ pip...")
    
    try:
        import pip
        print("‚úÖ pip –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
    except ImportError:
        print("‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pip: https://pip.pypa.io/en/stable/installing/")
        return False

def upgrade_pip():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip"""
    print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "--upgrade", "pip"
        ])
        print("‚úÖ pip –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip: {e}")
        return False

def install_package(package_name, description=""):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
    print(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package_name}...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", package_name, "--quiet"
        ])
        print(f"‚úÖ {package_name} - –£—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {package_name} - –û—à–∏–±–∫–∞: {e}")
        return False

def install_requirements():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ requirements.txt"""
    print("\nüì¶ –£–°–¢–ê–ù–û–í–ö–ê –û–°–ù–û–í–ù–´–• –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 50)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    essential_packages = [
        ("requests", "HTTP –±–∏–±–ª–∏–æ—Ç–µ–∫–∞"),
        ("beautifulsoup4", "–ü–∞—Ä—Å–∏–Ω–≥ HTML"),
        ("lxml", "XML/HTML –ø–∞—Ä—Å–µ—Ä"),
        ("fake-useragent", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è User-Agent"),
        ("urllib3", "HTTP –∫–ª–∏–µ–Ω—Ç"),
        ("certifi", "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
    ]
    
    success_count = 0
    
    for package, description in essential_packages:
        if install_package(package, description):
            success_count += 1
    
    print(f"\nüìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {success_count}/{len(essential_packages)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    print("\nüì¶ –£–°–¢–ê–ù–û–í–ö–ê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ü–ê–ö–ï–¢–û–í")
    print("=" * 50)
    
    optional_packages = [
        ("cloudscraper", "–û–±—Ö–æ–¥ Cloudflare"),
        ("selenium", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"),
        ("selenium-wire", "–ü–µ—Ä–µ—Ö–≤–∞—Ç —Ç—Ä–∞—Ñ–∏–∫–∞"),
        ("undetected-chromedriver", "–ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç Chrome"),
        ("requests-toolbelt", "–†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è requests"),
        ("pandas", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"),
        ("Pillow", "–†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    ]
    
    optional_success = 0
    
    for package, description in optional_packages:
        if install_package(package, description):
            optional_success += 1
    
    print(f"\nüìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {optional_success}/{len(optional_packages)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    return success_count, optional_success

def check_chrome():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Google Chrome"""
    print("\nüöó –ü–†–û–í–ï–†–ö–ê GOOGLE CHROME")
    print("=" * 40)
    
    system = platform.system()
    chrome_paths = []
    
    if system == "Windows":
        chrome_paths = [
            "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
            "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
            os.path.expanduser("~\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe")
        ]
    elif system == "Darwin":  # macOS
        chrome_paths = [
            "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
        ]
    elif system == "Linux":
        chrome_paths = [
            "/usr/bin/google-chrome",
            "/usr/bin/google-chrome-stable",
            "/usr/bin/chromium-browser",
            "/snap/bin/chromium"
        ]
    
    chrome_found = False
    for path in chrome_paths:
        if os.path.exists(path):
            print(f"‚úÖ Chrome –Ω–∞–π–¥–µ–Ω: {path}")
            chrome_found = True
            break
    
    if not chrome_found:
        print("‚ö†Ô∏è Google Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üì• –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:")
        if system == "Windows":
            print("   ‚Ä¢ https://www.google.com/chrome/")
        elif system == "Darwin":
            print("   ‚Ä¢ https://www.google.com/chrome/")
            print("   ‚Ä¢ brew install --cask google-chrome")
        elif system == "Linux":
            print("   ‚Ä¢ sudo apt install google-chrome-stable")
            print("   ‚Ä¢ sudo dnf install google-chrome-stable")
        print("üí° Selenium –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å Chromium –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞")
    
    return chrome_found

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–• –ü–ê–ö–ï–¢–û–í")
    print("=" * 50)
    
    test_packages = [
        ("requests", "import requests"),
        ("beautifulsoup4", "from bs4 import BeautifulSoup"),
        ("fake_useragent", "from fake_useragent import UserAgent"),
        ("cloudscraper", "import cloudscraper"),
        ("selenium", "from selenium import webdriver"),
        ("undetected_chromedriver", "import undetected_chromedriver")
    ]
    
    success_count = 0
    
    for package_name, import_statement in test_packages:
        try:
            exec(import_statement)
            print(f"‚úÖ {package_name} - OK")
            success_count += 1
        except ImportError as e:
            print(f"‚ùå {package_name} - –û—à–∏–±–∫–∞: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è {package_name} - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
    
    print(f"\nüìä –†–∞–±–æ—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {success_count}/{len(test_packages)}")
    return success_count

def create_test_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...")
    
    test_script = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
"""

def test_dependencies():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    results = {}
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    try:
        import requests
        results['requests'] = '‚úÖ OK'
    except ImportError:
        results['requests'] = '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    
    try:
        from bs4 import BeautifulSoup
        results['beautifulsoup4'] = '‚úÖ OK'
    except ImportError:
        results['beautifulsoup4'] = '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    
    try:
        from fake_useragent import UserAgent
        results['fake_useragent'] = '‚úÖ OK'
    except ImportError:
        results['fake_useragent'] = '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    try:
        import cloudscraper
        results['cloudscraper'] = '‚úÖ OK'
    except ImportError:
        results['cloudscraper'] = '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    
    try:
        from selenium import webdriver
        results['selenium'] = '‚úÖ OK'
    except ImportError:
        results['selenium'] = '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    
    try:
        import undetected_chromedriver
        results['undetected_chromedriver'] = '‚úÖ OK'
    except ImportError:
        results['undetected_chromedriver'] = '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("üß™ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 50)
    
    for package, status in results.items():
        print(f"{package:25} {status}")
    
    # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç requests
    print("\\nüåê –¢–µ—Å—Ç HTTP –∑–∞–ø—Ä–æ—Å–∞...")
    try:
        response = requests.get("https://httpbin.org/get", timeout=10)
        if response.status_code == 200:
            print("‚úÖ HTTP –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        else:
            print(f"‚ö†Ô∏è HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {e}")
    
    print("\\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_dependencies()
'''
    
    try:
        with open("test_dependencies.py", "w", encoding="utf-8") as f:
            f.write(test_script)
        print("‚úÖ –°–æ–∑–¥–∞–Ω test_dependencies.py")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

def print_final_instructions():
    """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    print("\nüéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 40)
    print("üìã –ß—Ç–æ –¥–∞–ª—å—à–µ:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test_dependencies.py")
    print("2. –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ:")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python comprehensive_analyzer.py")
    print()
    print("üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("   ‚Ä¢ README.md - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    print("   ‚Ä¢ –õ–æ–≥–∏ –≤ –ø–∞–ø–∫–µ logs/")
    print("   ‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –≤ examples/")
    print()
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    system_info = {
        '–°–∏—Å—Ç–µ–º–∞': platform.system(),
        '–í–µ—Ä—Å–∏—è': platform.release(),
        'Python': f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
        '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': platform.machine()
    }
    
    print("üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    for key, value in system_info.items():
        print(f"   {key}: {value}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞"""
    print_header()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not check_python_version():
        return False
    
    if not check_pip():
        return False
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
    upgrade_pip()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
    essential_count, optional_count = install_requirements()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    chrome_found = check_chrome()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
    working_packages = test_imports()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    create_test_script()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print_final_instructions()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê")
    print("=" * 30)
    
    if essential_count >= 4 and working_packages >= 3:
        print("üü¢ –û—Ç–ª–∏—á–Ω–æ! –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        success_level = "excellent"
    elif essential_count >= 3 and working_packages >= 2:
        print("üü° –•–æ—Ä–æ—à–æ! –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        success_level = "good"
    else:
        print("üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ! –ù–µ –≤—Å–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        success_level = "needs_attention"
    
    if not chrome_found:
        print("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Google Chrome –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    
    return success_level in ["excellent", "good"]

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nüéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä.")
        else:
            print("\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏.")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã.")
    except KeyboardInterrupt:
        print("\n\nüõë –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        print("   –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ issue")